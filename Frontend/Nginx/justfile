# By default it will kill current, container, build a new one and start it
image_name :='nginx-organizator:latest'
container_name :='nginx-organizator'

dns_stub_ip := `ip -4  addr show dns-stub | grep -oP '(?<=inet\s)\d+(\.\d+){3}'`
card_ip := `ip route get 9.9.9.9 | grep dev | cut -d ' ' -f7`

# redo everything
build-container: clean build-image
  mkdir -p log-nginx
  docker run -d --name {{container_name}} \
    -v $(pwd)/../Memo/build/main:/usr/share/nginx/html \
    -v $(pwd)/../Memo/src:/usr/share/nginx/html/src \
    -v $(pwd)/../organizator-wasm/pkg:/usr/share/nginx/html/pkg \
    -v $(pwd)/files:/files \
    -v $(pwd)/log-nginx:/var/log/nginx \
    --dns {{dns_stub_ip}} \
      {{image_name}}
  @set_container_dns_name.sh {{container_name}} organizator.lab
  dig +noall +answer @{{dns_stub_ip}} identity.lab:{{card_ip}} -t TYPE23
  dig +noall +answer @{{dns_stub_ip}} hyper-organizator.lab:{{card_ip}} -t TYPE23

build-image: copy-certificates
  docker build -t {{image_name}} .

copy-certificates:
  cp ../../DevEnvironment/Certificates/ca/organizator.lab.crt fullchain.pem
  cp ../../DevEnvironment/Certificates/ca/organizator.lab.key.unsecure privkey.pem

# will use the dns-stub to resolve dns names ending with .lab
split-dns:
  stub.sh

clean:
  rm -f fullchain.pem
  rm -f privkey.pem
  docker stop {{container_name}} || true
  docker rm {{container_name}} || true
  docker rmi -f {{image_name}}
  rm -f log-nginx/*

# will teleport inside the container
teleport:
  docker exec -it {{container_name}} sh
